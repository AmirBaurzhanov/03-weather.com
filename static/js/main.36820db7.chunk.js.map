{"version":3,"sources":["api/api.js","redux/reducers/weatherReducer.js","components/weather/weatherForm.jsx","components/weather/weather.jsx","components/commons/static/loader.svg","components/commons/preloader.jsx","components/weather/weatherContainer.jsx","App.js","redux/redux.js","index.js"],"names":["getWeather","name","axios","then","response","data","SET_WEATHER","TOGGLE_IS_FETCHING","initialState","wData","wTemp","wFeel","wCity","wCountry","isFetching","toggleIsFetchingAC","type","setWeatherTC","dispatch","a","Math","ceil","main","temp","feels_like","sys","country","WeatherForm","props","initialValues","city","onSubmit","values","setSubmitting","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","className","onChange","onBlur","value","text","disabled","Weather","weather","Preloader","src","loader","alt","WeatherContainer","getCity","formData","this","React","PureComponent","WeatherConnected","connect","state","classApp","Component","App","reducers","combineReducers","action","newData","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","rerenderEntireTree","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.36820db7.chunk.js","sourcesContent":["import * as axios from 'axios';\r\n\r\n\r\nexport const getWeather = (name) => {\r\n    return axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${name}&units=metric&appid=18ef8bad80aea30cbf1fc127fedc66d7`)\r\n        .then(response => response.data)\r\n}","import { getWeather } from \"../../api/api\";\r\n\r\nconst SET_WEATHER = \"weather/SET-WEATHER\";\r\nconst TOGGLE_IS_FETCHING = \"weather/TOGGLE-IS-FETCHING\";\r\n\r\nlet initialState = {\r\n    wData: {\r\n        wTemp: '',\r\n        wFeel: '',\r\n        wCity: '',\r\n        wCountry: '',\r\n    },\r\n    isFetching: false\r\n};\r\n\r\nexport const wReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_WEATHER:\r\n            let newData = {\r\n                wTemp: action.wTemp,\r\n                wFeel: action.wFeel,\r\n                wCity: action.wCity,\r\n                wCountry: action.wCountry,\r\n            }\r\n            return {\r\n                ...state, wData: newData\r\n            }\r\n\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        default:\r\n            return state\r\n    };\r\n}\r\n\r\n// Action Creators\r\nexport const setWeatherAC = (wTemp, wFeel, wCity, wCountry) => ({ type: SET_WEATHER, wTemp, wFeel, wCity, wCountry });\r\nexport const toggleIsFetchingAC = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching })\r\n\r\nexport const setWeatherTC = (name) => async (dispatch) => {\r\n    dispatch(toggleIsFetchingAC(true));\r\n    let response = await getWeather(name);\r\n    dispatch(setWeatherAC(\r\n        Math.ceil(response.main.temp),\r\n        Math.ceil(response.main.feels_like),\r\n        response.name,\r\n        response.sys.country\r\n    )\r\n    )\r\n    dispatch(toggleIsFetchingAC(false));\r\n}","import React from 'react';\r\nimport { Formik } from 'formik';\r\n\r\nconst WeatherForm = (props) => (\r\n    <div>\r\n        <Formik\r\n            initialValues={{ city: '', }}\r\n\r\n            onSubmit={(values, { setSubmitting }) => {\r\n                props.onSubmit(values)\r\n                setSubmitting(false);\r\n            }}\r\n        >\r\n            {({\r\n                values,\r\n                errors,\r\n                touched,\r\n                handleChange,\r\n                handleBlur,\r\n                handleSubmit,\r\n                isSubmitting,\r\n            }) => (\r\n                <form onSubmit={handleSubmit} className=\"input-group mb-3\">\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"city\"\r\n                        className=\"form-control\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.text}\r\n                    />\r\n                    {errors.text && touched.text && errors.text}\r\n                    <button className=\"btn btn-secondary\" type=\"submit\" disabled={isSubmitting}>\r\n                        Submit\r\n                    </button>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n);\r\n\r\nexport default WeatherForm","import WeatherForm from \"./weatherForm\";\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"container pt-5\">\r\n            <h4 className=\"pb-1\">There you can find your city weather!</h4>\r\n            <WeatherForm onSubmit={props.onSubmit} />\r\n            {!props.weather.wTemp ? <div className=\"pt-5\"> There nothing </div> : <div className=\"pt-5\">\r\n                <div className=\"col-4 offset-1\">\r\n                    <h1>Information </h1>\r\n                    <div className=\"alert alert-success\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-8\">\r\n                                <b>City: </b> {props.weather.wCity}, {props.weather.wCountry} <br />\r\n                                <b>Temp: </b> {props.weather.wTemp}<sup>o</sup><br />\r\n                                <b>Feels like: </b> {props.weather.wFeel}<sup>o</sup><br />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather;","export default __webpack_public_path__ + \"static/media/loader.a4091c42.svg\";","import loader from './static/loader.svg'\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img src={loader} alt=\"preloader\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { setWeatherTC } from '../../redux/reducers/weatherReducer';\r\nimport Weather from './weather';\r\nimport Preloader from '../commons/preloader'\r\n\r\nclass WeatherContainer extends React.PureComponent {\r\n\r\n    getCity = (formData) => {\r\n        this.props.setWeatherTC(formData.city)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader /> : null}\r\n                <Weather onSubmit={this.getCity} weather={this.props.weather} />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        weather: state.weather.wData,\r\n        isFetching: state.weather.isFetching\r\n    }\r\n}\r\n\r\nconst WeatherConnected = connect(mapStateToProps, { setWeatherTC })(WeatherContainer);\r\n\r\nexport default WeatherConnected;","import './App.css';\r\nimport { connect } from 'react-redux';\r\nimport { setWeatherTC } from './redux/reducers/weatherReducer';\r\nimport React from 'react';\r\nimport WeatherConnected from './components/weather/weatherContainer'\r\n\r\nclass classApp extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <WeatherConnected />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst App = connect(null, { setWeatherTC })(classApp);\r\n\r\nexport default App;\r\n","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { wReducer } from \"./reducers/weatherReducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    weather: wReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, /* preloadedState, */ composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport store from './redux/redux';\r\n\r\nlet rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App />\r\n            </BrowserRouter>\r\n        </Provider>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nrerenderEntireTree();\r\n\r\nexport default rerenderEntireTree;"],"sourceRoot":""}